{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string"
    },
    "storageAccount_name": {
      "type": "string"
    },
    "storageAccount_sku_name": {
      "type": "string"
    },
    "storageAccount_access_tier": {
      "type": "string"
    },
    "storageAccount_kind": {
      "type": "string"
    },
    "storageContainer_name": {
      "type": "string"
    },
    "database_account_name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Cosmos DB account."
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "maxValue": 2147483647,
      "minValue": 10,
      "metadata": {
        "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "maxValue": 86400,
      "minValue": 5,
      "metadata": {
        "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      }
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ]
    },
    "primaryRegion": {
      "type": "string",
      "metadata": {
        "description": "The primary region for the Cosmos DB account."
      }
    },
    "secondaryRegion": {
      "type": "string",
      "metadata": {
        "description": "The secondary region for the Cosmos DB account."
      }
    },
    "systemManagedFailover": {
      "type": "bool",
      "metadata": {
        "description": "Enable system managed failover for regions"
      }
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "The name for the database"
      }
    },
    "containerName": {
      "type": "string",
      "metadata": {
        "description": "The name for the container"
      }
    },
    "autoscaleMaxThroughput": {
      "type": "int",
      "maxValue": 1000000,
      "minValue": 1000,
      "metadata": {
        "description": "Maximum autoscale throughput for the container"
      }
    },
    "appName": {
      "type": "string",
      "metadata": {
        "description": "The name of the app service"
      }
    },
    // API GW
    "apimName": {
        "type": "string"
    },
    "tier": {
        "type": "string"
    },
    "capacity": {
        "type": "string"
    },
    "adminEmail": {
        "type": "string"
    },
    "organizationName": {
        "type": "string"
    },
    "tagsByResource": {
        "type": "object"
    },
    "customProperties": {
        "type": "object"
    },
    "identity": {
        "type": "object"
    },
    // Static Website
      "name": {
        "type": "string"
      },
      "sku": {
        "type": "string"
      },
      "skucode": {
        "type": "string"
      },
      "repositoryUrl": {
        "type": "string"
      },
      "branch": {
        "type": "string"
      },
      "repositoryToken": {
        "type": "securestring"
      },
      "appLocation": {
        "type": "string"
      },
      "apiLocation": {
        "type": "string"
      },
      "appArtifactLocation": {
        "type": "string"
      },
      "resourceTags": {
        "type": "object"
      },
      "appSettings": {
        "type": "object"
      }
  },
  "variables": {
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "locations": [
      {
        "locationName": "[parameters('primaryRegion')]",
        "failoverPriority": 0,
        "isZoneRedundant": false
      }
    ],
    "api-template": "https://raw.githubusercontent.com/VardyNg/Azure-POC-shopping-list-API/main/azuredeploy.json"
  },
  "resources": [
    // Storage Account
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "[parameters('storageAccount_sku_name')]"
      },
      "kind": "[parameters('storageAccount_kind')]",
      "name": "[parameters('storageAccount_name')]",
      "apiVersion": "2017-10-01",
      "location": "[parameters('location')]",
      "tags": {},
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "[parameters('storageAccount_access_tier')]"
      },
      "dependsOn": []
    },
    // Database account
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-05-15",
      "name": "[toLower(parameters('database_account_name'))]",
      "kind": "GlobalDocumentDB",
      "location": "[parameters('location')]",
      "properties": {
        "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
        "locations": "[variables('locations')]",
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": "[parameters('systemManagedFailover')]",
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ]
      }
    },
    // Database 
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}', toLower(parameters('database_account_name')), parameters('databaseName'))]",
      "properties": {
        "resource": {
          "id": "[parameters('databaseName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('database_account_name')))]"
      ]
    },
    // Database Container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', toLower(parameters('database_account_name')), parameters('databaseName'), parameters('containerName'))]",
      "properties": {
        "resource": {
          "id": "[parameters('containerName')]",
          "partitionKey": {
            "paths": [
              "/myPartitionKey"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/myPathToNotIndex/*"
              },
              {
                "path": "/_etag/?"
              }
            ],
            "compositeIndexes": [
              [
                {
                  "path": "/name",
                  "order": "ascending"
                },
                {
                  "path": "/age",
                  "order": "descending"
                }
              ]
            ],
            "spatialIndexes": [
              {
                "path": "/path/to/geojson/property/?",
                "types": [
                  "Point",
                  "Polygon",
                  "MultiPolygon",
                  "LineString"
                ]
              }
            ]
          },
          "defaultTtl": 86400,
          "uniqueKeyPolicy": {
            "uniqueKeys": [
              {
                "paths": [
                  "/phoneNumber"
                ]
              }
            ]
          }
        }
        //,
        // "options": {
        //   "autoscaleSettings": {
        //     "maxThroughput": "[parameters('autoscaleMaxThroughput')]"
        //   }
        // }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('database_account_name')), parameters('databaseName'))]"
      ]
    },
    // API template
    {
      "name": "api",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('api-template')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccount_name": {"value": "[parameters('storageAccount_name')]"},
          "appName": {"value": "[parameters('appName')]"},
          "apimName": {"value": "[parameters('apimName')]"},
          "tier": {"value": "[parameters('tier')]"},
          "capacity": {"value": "[parameters('capacity')]"},
          "adminEmail": {"value": "[parameters('adminEmail')]"},
          "organizationName": {"value": "[parameters('organizationName')]"},
          "tagsByResource": {"value": "[parameters('tagsByResource')]"},
          "customProperties": {"value": "[parameters('customProperties')]"},
          "identity": {"value": "[parameters('identity')]"}
        }
      }
    },
    // Static Website
    {
      "apiVersion": "2021-01-15",
      "name": "[parameters('name')]",
      "type": "Microsoft.Web/staticSites",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "repositoryUrl": "[parameters('repositoryUrl')]",
        "branch": "[parameters('branch')]",
        // "repositoryToken": "[parameters('repositoryToken')]",
        "buildProperties": {
          "appLocation": "[parameters('appLocation')]",
          "apiLocation": "[parameters('apiLocation')]",
          "appArtifactLocation": "[parameters('appArtifactLocation')]"
        }
      },
      "sku": {
        "Tier": "[parameters('sku')]",
        "Name": "[parameters('skuCode')]"
      },
      "resources": [
        {
          "apiVersion": "2021-01-15",
          "name": "appsettings",
          "type": "config",
          "location": "[parameters('location')]",
          "properties": "[parameters('appSettings')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/staticSites', parameters('name'))]"
          ]
        }
      ]
    }
  ]
}